///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2016-2021, Intel Corporation 
// 
// SPDX-License-Identifier: MIT
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// XeGTAO is based on GTAO/GTSO "Jimenez et al. / Practical Real-Time Strategies for Accurate Indirect Occlusion", 
// https://www.activision.com/cdn/research/Practical_Real_Time_Strategies_for_Accurate_Indirect_Occlusion_NEW%20VERSION_COLOR.pdf
// 
// Implementation:  Filip Strugar (filip.strugar@intel.com), Steve Mccalla <stephen.mccalla@intel.com>         (\_/)
// Version:         (see XeGTAO_Common.sdsl)                                                                  (='.'=)
// Details:         https://github.com/GameTechDev/XeGTAO                                                     (")_(")
//
// Version history: see XeGTAO.h
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

shader XeGTAO_Denoise_ComputeFX : ComputeShaderBase, XeGTAO_Common
{
    rgroup PerDispatch
    {
        Texture2D<uint>             SrcWorkingAOTerm;   // coming from previous pass
        Texture2D<float>            SrcWorkingEdges;    // coming from previous pass
        RWTexture2D<float4>         OutFinalAOTerm;     // final AO term - just 'visibility' or 'visibility + bent normals'
    }

    override void Compute()
    {
        const uint2 pixCoordBase = streams.DispatchThreadId.xy * uint2( 2, 1 );    // we're computing 2 horizontal pixels at a time (performance optimization)
        // g_samplerPointClamp is a sampler with D3D12_FILTER_MIN_MAG_MIP_POINT filter and D3D12_TEXTURE_ADDRESS_MODE_CLAMP addressing mode
        XeGTAO_Denoise( pixCoordBase, GTAOConsts[0], SrcWorkingAOTerm, SrcWorkingEdges, PointClampSampler, OutFinalAOTerm, true );
    }
};