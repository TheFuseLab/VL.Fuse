shader LineMesh_ComputeFX : ComputeShaderBase, Transformation, Camera, FuseCommonBuffer, LineAttributeStream, LineCommon
{
    cbuffer PerDispatch
    {
        stage StructuredBuffer<float3> PositionBuffer;
        stage RWStructuredBuffer<Pos3Norm3Col4Tex2> outputBuffer;

        stage int Resolution;
        stage int ThicknessSpace = 0;
        stage int MeshType = 0;
        stage float4x4 Transform;

        stage int SegmentCountGlobal;
        stage StructuredBuffer<LineInfo> InfoBuffer;
    }

    compose ComputeFloat Width;
    compose ComputeFloat4 Color;

    override void Compute()
    {
        uint dtid = streams.DispatchThreadId.x;

        uint n = sbSize3(PositionBuffer);
        if(dtid >= n) return;

        uint segmentId, lineId, segmentCount;

        uint count, dummy;	
		InfoBuffer.GetDimensions(count,dummy);
        if(count > 0)
        {
            LineInfo info = InfoBuffer[count - 1];
            if(dtid >= info.start+info.count) return;
            
            info = InfoBuffer[dtid];

            segmentId    = dtid - info.start;
            lineId       = info.id;
            segmentCount = info.count;
        }
        else
        {
            segmentId    = dtid % SegmentCountGlobal;
            lineId       = dtid / SegmentCountGlobal;
            segmentCount = SegmentCountGlobal;
        }

        streams.SegmentId = segmentId;
        streams.LineId = lineId;

        uint prevId = segmentId == 0 ? dtid : dtid - 1;
        uint nextId = segmentId == segmentCount-1 ? dtid : dtid + 1;

        float3 p = PositionBuffer[dtid];
        float3 prevPt = PositionBuffer[prevId];
        float3 nextPt = PositionBuffer[nextId];

        float3 t = mul(nextPt - prevPt, (float3x3)Transform);

        p = mul(float4(p,1), Transform).xyz;
        streams.LinePosition = p;

        float3 viewDir = ViewInverse[3].xyz - p;
        float3 viewFront = ViewInverse[2].xyz;

        float scale = ThicknessSpace == 1 ? dot(viewFront, viewDir)/min(ViewSize.x,ViewSize.y) : 1;
        scale *= Width.Compute();

        if(MeshType == 0) // Ribbon Triangle Strip
        {
            FlatMeshLineStrip(outputBuffer, dtid - lineId, segmentId, p, t, 
                                scale, Color.Compute(), segmentCount, normalize(viewDir));
        }
        else // Tube Triangle List
        {
            TubeMeshLineStrip(outputBuffer, dtid - lineId, segmentId, p, t, 
                            scale, Color.Compute(), segmentCount, Resolution);
        }
    }
};