shader LineCommon : FuseCoreMath, Pos3Norm3Col4Tex2Tan4Vertex
{
    #define BITANGENT_DIR -1

    float3x3 rot3D(float3 axis, float angle)
    {
        float c, s;
        sincos(angle, s, c);

        float t = 1 - c;
        float x = axis.x;
        float y = axis.y;
        float z = axis.z;

        return float3x3(
            t * x * x + c,      t * x * y - s * z,  t * x * z + s * y,
            t * x * y + s * z,  t * y * y + c,      t * y * z - s * x,
            t * x * z - s * y,  t * y * z + s * x,  t * z * z + c
        );
    }

    void FlatMeshLine(RWStructuredBuffer<Pos3Norm3Col4Tex2Tan4Id2> outputBuffer, uint id,
                    float3 pos, float3 tan, float scale, float4 color,
                    float3 posNext, float3 tanNext, float scaleNext, float4 colorNext,
                    float radius, int sampleCnt, bool normalBend, float3 up = float3(0,1,0), float3 upNext = float3(0,1,0))
    {
        Pos3Norm3Col4Tex2Tan4Id2 v0, v1, v2, v3;

        float3 dir = normalize(cross(tan, up));
        float3 dirNext = normalize(cross(tanNext, upNext));

        v0.Position = pos + dir * radius * .5 * scale;
        v1.Position = posNext + dirNext * radius * .5 * scaleNext;
        v2.Position = pos - dir * radius * .5 * scale;
        v3.Position = posNext - dirNext * radius * .5 * scaleNext;

        float t = normalBend? .5 : 1;
        v0.Normal = normalize(lerp( dir, up, t));
        v1.Normal = normalize(lerp( dirNext, upNext, t));
        v2.Normal = normalize(lerp(-dir, up, t));
        v3.Normal = normalize(lerp(-dirNext, upNext, t));

        v0.Color = v2.Color = color;
        v1.Color = v3.Color = colorNext;

        v0.Tangent = v2.Tangent = float4(tan, BITANGENT_DIR);
        v1.Tangent = v3.Tangent = float4(tanNext, BITANGENT_DIR);

        float div = 1.0 / sampleCnt;
        v0.TexCoord = float2(div*id, 1);
        v1.TexCoord = float2(div*(id+1), 1);
        v2.TexCoord = float2(div*id, 0);
        v3.TexCoord = float2(div*(id+1), 0);

        v0.LineId = v1.LineId = v2.LineId = v3.LineId = id;
        v0.SegmentId = v2.SegmentId = 0;
        v1.SegmentId = v3.SegmentId = 1;

        // tri0
        outputBuffer[id * 6 + 0] = v2;
        outputBuffer[id * 6 + 1] = v1;
        outputBuffer[id * 6 + 2] = v0;

        // tri1
        outputBuffer[id * 6 + 3] = v2;
        outputBuffer[id * 6 + 4] = v3;
        outputBuffer[id * 6 + 5] = v1;
    }

    void FlatMeshLineStrip(RWStructuredBuffer<Pos3Norm3Col4Tex2Tan4Id2> outputBuffer, uint id, uint lineId, uint segmentId,
                        float3 pos, float3 tan, float scale, float4 color,
                        int sampleCnt, bool normalBend, float3 up = float3(0,1,0))
    {
        Pos3Norm3Col4Tex2Tan4Id2 v0, v1;

        float3 dir = normalize(cross(tan, up));

        v0.Position = pos + dir * .5 * scale;
        v1.Position = pos - dir * .5 * scale;

        float t = normalBend? .5 : 1;
        v0.Normal = normalize(lerp( dir, up, t));
        v1.Normal = normalize(lerp(-dir, up, t));

        v0.Color = v1.Color = color;

        float div = 1.0 / (sampleCnt-1);
        v0.TexCoord = float2(div*segmentId, 1);
        v1.TexCoord = float2(div*segmentId, 0);

        v0.Tangent = float4(tan, BITANGENT_DIR);
        v1.Tangent = float4(tan, BITANGENT_DIR);

        v0.LineId = v1.LineId = lineId;
        v0.SegmentId = v1.SegmentId = segmentId;

        uint pOffset = (id - 1) * 6;
        uint offset = id * 6;

        if(segmentId != 0)
        {
            outputBuffer[pOffset + 1] = v0;
            outputBuffer[pOffset + 4] = v1;
            outputBuffer[pOffset + 5] = v0;
        }

        if(segmentId != sampleCnt - 1)
        {
            outputBuffer[offset + 0] = v1;
            outputBuffer[offset + 2] = v0;
            outputBuffer[offset + 3] = v1;
        }
    }

    void TubeMeshLine(RWStructuredBuffer<Pos3Norm3Col4Tex2Tan4Id2> outputBuffer, uint id, 
                    float3 pos, float3 tan, float scale, float4 color,
                    float3 posNext, float3 tanNext, float scaleNext, float4 colorNext,
                    float radius, int sampleCnt, int resolution, float3 up = float3(0,1,0))
    {
        Pos3Norm3Col4Tex2Tan4Id2 v0, v1, v2, v3;

        float3 dir = normalize(cross(tan, cross(tan, up)));
        float3 dirNext = normalize(cross(tanNext, cross(tanNext, up)));

        float3x3 r = rot3D(normalize(tan), TWOPI / resolution);
        float3x3 rNext = rot3D(normalize(tanNext), TWOPI / resolution);

        v0.Position = pos + dir * radius * .5 * scale;
        v1.Position = posNext + dirNext * radius * .5 * scaleNext;

        v0.Color = v2.Color = color;
        v1.Color = v3.Color = colorNext;

        v0.Tangent = v2.Tangent = float4(tan, BITANGENT_DIR);
        v1.Tangent = v3.Tangent = float4(tanNext, BITANGENT_DIR);

        float divX = 1.0 / (float)sampleCnt;
        float divY = 1.0 / resolution;

        v0.TexCoord = float2(divX * id, 0);
        v1.TexCoord = float2(divX * (id+1), 0);

        v0.LineId = v1.LineId = v2.LineId = v3.LineId = id;
        v0.SegmentId = v2.SegmentId = 0;
        v1.SegmentId = v3.SegmentId = 1;

        for(uint i = 0; i < resolution; i++)
        {
            v0.Normal = dir;
            v1.Normal = dirNext;

            dir = mul(dir, r);
            dirNext = mul(dirNext, rNext);

            v2.Position = pos + dir * radius * .5 * scale;
            v3.Position = posNext + dirNext * radius * .5 * scaleNext;

            v2.Normal = dir;
            v3.Normal = dirNext;

            v2.TexCoord = float2(divX * id, divY * (i+1));
            v3.TexCoord = float2(divX * (id+1), divY * (i+1));

            uint offset = id * 6 * resolution + 6 * i;

            // tri0
            outputBuffer[offset + 0] = v2;
            outputBuffer[offset + 1] = v1;
            outputBuffer[offset + 2] = v0;

            // tri1
            outputBuffer[offset + 3] = v2;
            outputBuffer[offset + 4] = v3;
            outputBuffer[offset + 5] = v1;

            v0.Position = v2.Position;
            v1.Position = v3.Position;

            v0.TexCoord = v2.TexCoord;
            v1.TexCoord = v3.TexCoord;
        }
    }

    void TubeMeshLineStrip(RWStructuredBuffer<Pos3Norm3Col4Tex2Tan4Id2> outputBuffer, uint id, uint lineId, uint segmentId,
                    float3 pos, float3 tan, float scale, float4 color,
                    int sampleCnt, int resolution, float3 up = float3(0,1,0))
    {
        Pos3Norm3Col4Tex2Tan4Id2 v0, v1;

        float3 dir = normalize(cross(tan, cross(tan, up)));

        float3x3 r = rot3D(normalize(tan), TWOPI / resolution);

        v0.Position = pos + dir * .5 * scale;
        v0.Color = v1.Color = color;

        float divX = 1.0 / (float)sampleCnt;
        float divY = 1.0 / resolution;

        v0.TexCoord = float2(divX * segmentId, 0);

        v0.Tangent = float4(tan, BITANGENT_DIR);
        v1.Tangent = float4(tan, BITANGENT_DIR);

        v0.LineId = v1.LineId = lineId;
        v0.SegmentId = v1.SegmentId = segmentId;

        for(uint i = 0; i < resolution; i++)
        {
            v0.Normal = dir;
            dir = mul(dir, r);

            v1.Position = pos + dir * .5 * scale;
            v1.Normal = dir;
            v1.TexCoord = float2(divX * segmentId, divY * (i+1));

            uint prevOffset = (id - 1) * 6 * resolution + 6 * i;
            uint offset = id * 6 * resolution + 6 * i;

            if(segmentId != 0)
            {
                outputBuffer[prevOffset + 1] = v0;
                outputBuffer[prevOffset + 4] = v1;
                outputBuffer[prevOffset + 5] = v0;
            }

            if(segmentId != sampleCnt - 1)
            {
                outputBuffer[offset + 0] = v1;
                outputBuffer[offset + 2] = v0;
                outputBuffer[offset + 3] = v1;
            }

            v0.Position = v1.Position;
            v0.TexCoord = v1.TexCoord;
        }
    }
};