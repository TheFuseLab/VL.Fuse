shader BoxGeomExtVS_ShaderFX : MaterialExtension, VertexIDStream, ParticleBuffer
{
    cbuffer PerMaterial
    {
        


    }

    stream bool Skip;

    static const float3 QuadPositions[24] = 
    {
        float3(-1, 1, 1),
        float3( 1, 1, 1),
        float3(-1,-1, 1),
        float3( 1,-1, 1),

        float3( 1, 1,-1),
        float3(-1, 1,-1),
        float3( 1,-1,-1),
        float3(-1,-1,-1),

        float3( 1, 1, 1),
        float3(-1, 1, 1),
        float3( 1, 1,-1),
        float3(-1, 1,-1),

        float3(-1,-1, 1),
        float3( 1,-1, 1),
        float3(-1,-1,-1),
        float3( 1,-1,-1),

        float3( 1,-1, 1),
        float3( 1, 1, 1),
        float3( 1,-1,-1),
        float3( 1, 1,-1),

        float3(-1, 1, 1),
        float3(-1,-1, 1),
        float3(-1, 1,-1),
        float3(-1,-1,-1),
    };

    static const float2 QuadUV[4] = 
    {
        float2(0,1), 
        float2(1,1),
        float2(0,0),
        float2(1,0)
    };

    stage override void PreTransformPosition()
    {
    }

    stage override void TransformPosition()
    {
    }

    stage override void PostTransformPosition()
    {
        uint id = streams.VertexID_VS;
        uint vid = id % 24;
        uint iid = id / 24;
        uint nid = vid / 4;

        Particle p = Particles[iid];
        if (p.Cycle == 0 || p.Age < 0) return;

        float3 normals[6];

        normals[0] = p.AxisZ;
        normals[1] = -p.AxisZ;
        normals[2] = p.AxisY;
        normals[3] = -p.AxisY;
        normals[4] = p.AxisX;
        normals[5] = -p.AxisX;

        uint i = vid;
        
        streams.TexCoord  = QuadUV[i % 4].xy;
        float4 posWorld = float4(p.Position, 1);
        posWorld.xyz += QuadPositions[i].x * p.AxisX * p.Size3.x;
        posWorld.xyz += QuadPositions[i].y * p.AxisY * p.Size3.y;
        posWorld.xyz += QuadPositions[i].z * p.AxisZ * p.Size3.z;
        
        posWorld = mul(posWorld, World);
        
        streams.PositionWS = posWorld;
        streams.normalWS = normals[nid];

        streams.ShadingPosition = mul(posWorld, ViewProjection);
        streams.DepthVS = streams.ShadingPosition.w;

        streams.Skip = false;
    }

    void SpawnQuad(uint start, inout TriangleStream<Output> triangleStream, float3 normal, Particle p)
    {
       for(uint i = start; i < start + 4; i++)
       {
            streams.TexCoord  = QuadUV[i % 4].xy;
            float4 posWorld = float4(p.Position, 1);
            posWorld.xyz += QuadPositions[i].x * p.AxisX * p.Size3.x;
            posWorld.xyz += QuadPositions[i].y * p.AxisY * p.Size3.y;
            posWorld.xyz += QuadPositions[i].z * p.AxisZ * p.Size3.z;
            
            posWorld = mul(posWorld, World);
            
            streams.PositionWS = posWorld;
            streams.normalWS = normal;

            float4 posView = mul(posWorld, View);
            streams.ShadingPosition = mul(posView, Projection);
            streams.DepthVS = streams.ShadingPosition.w;
            
            triangleStream.Append(streams);
        }

        triangleStream.RestartStrip();
    }

    // [maxvertexcount(24)]
    // stage void GSMain(point Input input[1], inout TriangleStream<Output> triangleStream)
    // {
    //     streams = input[0];
    //     Particle p = Particles[streams.VertexID];
    //     if (p.Cycle == 0 || p.Age < 0) return;
        
    //     SpawnQuad(0, triangleStream, p.AxisZ, p);
    //     SpawnQuad(4, triangleStream, -p.AxisZ, p);
    //     SpawnQuad(8, triangleStream, p.AxisY, p);
    //     SpawnQuad(12, triangleStream, -p.AxisY, p);
    //     SpawnQuad(16, triangleStream, p.AxisX, p);
    //     SpawnQuad(20, triangleStream, -p.AxisX, p);
    // }
};