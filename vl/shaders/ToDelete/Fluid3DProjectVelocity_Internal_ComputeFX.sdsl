//----------------------------------------------------------------------------------
// File:   FluidSim.fx
// Author: Sarah Tariq and Ignacio Llamas
// Email:  sdkfeedback@nvidia.com
// 
// Copyright (c) 2007 NVIDIA Corporation. All rights reserved.
//
// TO  THE MAXIMUM  EXTENT PERMITTED  BY APPLICABLE  LAW, THIS SOFTWARE  IS PROVIDED
// *AS IS*  AND NVIDIA AND  ITS SUPPLIERS DISCLAIM  ALL WARRANTIES,  EITHER  EXPRESS
// OR IMPLIED, INCLUDING, BUT NOT LIMITED  TO, IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL  NVIDIA OR ITS SUPPLIERS
// BE  LIABLE  FOR  ANY  SPECIAL,  INCIDENTAL,  INDIRECT,  OR  CONSEQUENTIAL DAMAGES
// WHATSOEVER (INCLUDING, WITHOUT LIMITATION,  DAMAGES FOR LOSS OF BUSINESS PROFITS,
// BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS)
// ARISING OUT OF THE  USE OF OR INABILITY  TO USE THIS SOFTWARE, EVEN IF NVIDIA HAS
// BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
//
//
//----------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------
// Shaders to implement a "stable fluids" style semi-Lagrangian solver for 3D smoke
//--------------------------------------------------------------------------------------
// It assumes the velocity and pressure grids are collocated
// It handles boundary conditions for static obstacles stored as an in/out voxel volume
// BFECC is supported for smoke density advection
// The diffusion step is skipped
//--------------------------------------------------------------------------------------

shader Fluid3DProjectVelocity_Internal_ComputeFX : ComputeShaderBase, Fluid3DGlobals
{
    //--------------------------------------------------------------------------------------
    // Textures
    //--------------------------------------------------------------------------------------

    Texture3D<float> Texture_ObstGradient;
    Texture3D<float3> Texture_ObstVelocity;
    Texture3D<float> Texture_Pressure;

    Texture3D<float3> Texture_Velocity;
    RWTexture3D<float3> Texture_Velocity_RW; //Input & Output Texture
    
    //--------------------------------------------------------------------------------------
    // Variables
    //--------------------------------------------------------------------------------------

    float Modulate = 1.0f;

    //--------------------------------------------------------------------------------------
    // Helper functions
    //--------------------------------------------------------------------------------------

    float3 GetObstVelocity( float3 cellTexCoords )
    {
        return Texture_ObstVelocity[cellTexCoords];
    }

    bool IsBoundaryCell( float3 cellTexCoords )
    {   
        return (Texture_ObstGradient[cellTexCoords].r > 0.9);    
    }
    
    //--------------------------------------------------------------------------------------
    // Compute Shader
    //--------------------------------------------------------------------------------------
    
    override void Compute()
    {
        uint3 i = streams.DispatchThreadId;
        uint3 dim = FluidDimensions;

        if( IsBoundaryCell(i) )
        {
            Texture_Velocity_RW[i] = GetObstVelocity(i);
            return;
        }

        uint3 LEFTCELL = uint3(max(i.x - 1, 0), i.y, i.z);
        uint3 RIGHTCELL = uint3(min(i.x + 1, dim.x - 1), i.y, i.z);
        uint3 BOTTOMCELL = uint3(i.x, max(i.y - 1, 0), i.z);
        uint3 TOPCELL = uint3(i.x, min(i.y + 1, dim.y - 1), i.z);
        uint3 DOWNCELL = uint3(i.x, i.y, max(i.z - 1, 0));
        uint3 UPCELL = uint3(i.x, i.y, min(i.z + 1, dim.z - 1));


        float pCenter = Texture_Pressure[i]; 
        float pL = Texture_Pressure[LEFTCELL];
        float pR = Texture_Pressure[RIGHTCELL];
        float pB = Texture_Pressure[BOTTOMCELL];
        float pT = Texture_Pressure[TOPCELL];
        float pD = Texture_Pressure[DOWNCELL];
        float pU = Texture_Pressure[UPCELL];

        float3 velocity;
        float3 obstV = float3(0,0,0);
        float3 vMask = float3(1,1,1);
        float3 v;

        float3 vLeft = GetObstVelocity(LEFTCELL);
        float3 vRight = GetObstVelocity(RIGHTCELL);
        float3 vBottom = GetObstVelocity(BOTTOMCELL);
        float3 vTop = GetObstVelocity(TOPCELL);
        float3 vDown = GetObstVelocity(DOWNCELL);
        float3 vUp = GetObstVelocity(UPCELL);

        if( IsBoundaryCell(LEFTCELL) )  { pL = pCenter; obstV.x = vLeft.x; vMask.x = 0; }
        if( IsBoundaryCell(RIGHTCELL) ) { pR = pCenter; obstV.x = vRight.x; vMask.x = 0; }
        if( IsBoundaryCell(BOTTOMCELL) ){ pB = pCenter; obstV.y = vBottom.y; vMask.y = 0; }
        if( IsBoundaryCell(TOPCELL) )   { pT = pCenter; obstV.y = vTop.y; vMask.y = 0; }
        if( IsBoundaryCell(DOWNCELL) )  { pD = pCenter; obstV.z = vDown.z; vMask.z = 0; }
        if( IsBoundaryCell(UPCELL) )    { pU = pCenter; obstV.z = vUp.z; vMask.z = 0; }

        float3 velTex = Texture_Velocity[i];

        v = (velTex - (0.5 * Modulate * float3( pR - pL, pT - pB, pU - pD )) );

        velocity = (vMask * v) + obstV;

        Texture_Velocity_RW[i] = velocity;
    }

};