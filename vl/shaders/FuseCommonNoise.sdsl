
/*

	Basic Usage:
	Simple noise types can be called with 1D, 2D, 3D or 4D domains, and can return a float, float2, float3 or float 4 as a result

	The format is [NoiseType][ResultType][DomainType]

	for example:
	valueNoise13 -> returns Value Noise as a float over 3D space
	simplexNoise42 -> returns Simplex Noise as a float4 over 2D space

*/

shader FuseCommonNoise :  
	FuseCommonNoiseSine, 
	FuseCommonNoiseLUT, 
	FuseCommonNoiseValueNoise, 
	FuseCommonNoiseGradientNoise, 
	FuseCommonNoiseSimplex, 
	FuseCommonNoiseRandom, 
	FuseCommonNoiseWorley // would be better to support sub folders for organization and naming
{

	////////////////////////////////////////////////////////////////
	//
	//          Vector Noise Helpers
	// 
	////////////////////////////////////////////////////////////////

	// for calling function multiple times to get vector valued result.  Should be in main noise file
	static const float3 vectorValuedNoiseOffsets = float3(17.0, -43.7, 67.0);

	////////////////////////////////////////////////////////////////////////////////////
	// 1D

	// 1D 2D Vector Valued
	void noiseDomainOffset (inout float p1, out float p2)
	{ p2 = p1 + vectorValuedNoiseOffsets.x; }

	// 1D 3D Vector Valued
	void noiseDomainOffset (inout float p1, out float p2, out float p3)
	{ p2 = p1 + vectorValuedNoiseOffsets.x; p3 = p1 + vectorValuedNoiseOffsets.y; }

	// 1D 4D Vector Valued
	void noiseDomainOffset (inout float p1, out float p2, out float p3, out float p4)
	{ p2 = p1 + vectorValuedNoiseOffsets.x; p3 = p1 + vectorValuedNoiseOffsets.y; p4 = p1 + vectorValuedNoiseOffsets.y; }


	////////////////////////////////////////////////////////////////////////////////////
	// 2D

	// 2D 2D Vector Valued
	void noiseDomainOffset (inout float2 p1, out float2 p2)
	{ p2 = p1 + vectorValuedNoiseOffsets.x; }

	//2D 3D Vector Valued
	void noiseDomainOffset (inout float2 p1, out float2 p2, out float2 p3)
	{ p2 = p1 + vectorValuedNoiseOffsets.x; p3 = p1 + vectorValuedNoiseOffsets.y; }

	//2D 4D Vector Valued
	void noiseDomainOffset (inout float2 p1, out float2 p2, out float2 p3, out float2 p4)
	{ p2 = p1 + vectorValuedNoiseOffsets.x; p3 = p1 + vectorValuedNoiseOffsets.y; p4 = p1 + vectorValuedNoiseOffsets.y; }

	////////////////////////////////////////////////////////////////////////////////////
	// 3D

	// 3D 2D Vector Valued
	void noiseDomainOffset (inout float3 p1, out float3 p2)
	{ p2 = p1 + vectorValuedNoiseOffsets.x; }

	// 3D 3D Vector Valued
	void noiseDomainOffset (inout float3 p1, out float3 p2, out float3 p3)
	{ p2 = p1 + vectorValuedNoiseOffsets.x; p3 = p1 + vectorValuedNoiseOffsets.y; }

	// 3D 4D Vector Valued
	void noiseDomainOffset (inout float3 p1, out float3 p2, out float3 p3, out float3 p4)
	{
		p2 = p1 + vectorValuedNoiseOffsets.x; p3 = p1 + vectorValuedNoiseOffsets.y; p4 = p1 + vectorValuedNoiseOffsets.y;
	}

	////////////////////////////////////////////////////////////////////////////////////
	// 4D

	// 4D 2D Vector Valued
	void noiseDomainOffset (inout float4 p1, out float4 p2)
	{ p2 = p1 + vectorValuedNoiseOffsets.x; }

	// 4D 3D Vector Valued
	void noiseDomainOffset (inout float4 p1, out float4 p2, out float4 p3)
	{ p2 = p1 + vectorValuedNoiseOffsets.x; p3 = p1 + vectorValuedNoiseOffsets.y; }

	// 4D 4D Vector Valued
	void noiseDomainOffset (inout float4 p1, out float4 p2, out float4 p3, out float4 p4)
	{
		p2 = p1 + vectorValuedNoiseOffsets.x; p3 = p1 + vectorValuedNoiseOffsets.y; p4 = p1 + vectorValuedNoiseOffsets.z;
	}

	////////////////////////////////////////////////////////////////////////////////////
	// DFV
	// return a divergence-free 3D vector field 

	float3 sineNoiseDFV(float3 p)
	{
	    float4 n1 = sineNoiseGrad(p);
		float4 n2 = sineNoiseGrad(p+vectorValuedNoiseOffsets);
		return cross(n1.yzw, n2.yzw);
	}

	float3 valueNoiseDFV(float3 p)
	{
	    float4 n1 = valueNoiseGrad(p);
		float4 n2 = valueNoiseGrad(p+vectorValuedNoiseOffsets);
		return cross(n1.yzw, n2.yzw);
	}

	float3 gradientNoiseDFV(float3 p)
	{
	    float4 n1 = gradientNoiseGrad(p);
		float4 n2 = gradientNoiseGrad(p+vectorValuedNoiseOffsets);
		return cross(n1.yzw, n2.yzw);
	}

	float3 simplexNoiseDFV(float3 p)
	{
	    float4 n1 = simplexNoiseGrad(p);
		float4 n2 = simplexNoiseGrad(p+vectorValuedNoiseOffsets);
		return cross(n1.yzw, n2.yzw);
	}

	float3 worleysimpleNoiseDFV(float3 p)
	{
	    float4 n1 = worleySimpleNoiseGrad(p);
		float4 n2 = worleySimpleNoiseGrad(p+vectorValuedNoiseOffsets);
		return cross(n1.yzw, n2.yzw);
	}


	////////////////////////////////////////////////////////////////
	//
	//          Sine Basis
	// 
	////////////////////////////////////////////////////////////////

	// just for study, but can in fact be a usefel cheap basis.  

	// 1D
	float sineNoise11 (float p)
	{ return sineNoise(p); }

	float sineNoise12 (float2 p)
	{ return sineNoise(p); }

	float sineNoise13 (float3 p)
	{ return sineNoise(p); }

	float sineNoise14 (float4 p)
	{ return sineNoise(p); }

	// 2D
	float2 sineNoise21 (float p)
	{
		float p2;
		noiseDomainOffset(p, p2);
		return float2(sineNoise(p), sineNoise(p2));
	}

	float2 sineNoise22 (float2 p)
	{
		float2 p2;
		noiseDomainOffset(p, p2);
		return float2(sineNoise(p), sineNoise(p2));
	}

	float2 sineNoise23 (float3 p)
	{
		float3 p2;
		noiseDomainOffset(p, p2);
		return float2(sineNoise(p), sineNoise(p2));
	}

	float2 sineNoise24 (float4 p)
	{
		float4 p2;
		noiseDomainOffset(p, p2);
		return float2(sineNoise(p), sineNoise(p2));
	}

	// 3D
	float3 sineNoise31 (float p)
	{
		float p2, p3;
		noiseDomainOffset(p, p2, p3);
		return float3(sineNoise(p), sineNoise(p2), sineNoise(p3));
	}

	float3 sineNoise32 (float2 p)
	{
		float2 p2, p3; 
		noiseDomainOffset(p, p2, p3);
		return float3(sineNoise(p), sineNoise(p2), sineNoise(p3));
	}

	float3 sineNoise33 (float3 p)
	{
		float3 p2, p3;
		noiseDomainOffset(p, p2, p3);
		return float3(sineNoise(p), sineNoise(p2), sineNoise(p3));
	}

	float3 sineNoise34 (float4 p)
	{
		float4 p2, p3;
		noiseDomainOffset(p, p2, p3);
		return float3(sineNoise(p), sineNoise(p2), sineNoise(p3));
	}

	// 4D
	float4 sineNoise41(float p)
	{
		float p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(sineNoise(p), sineNoise(p2), sineNoise(p3), sineNoise(p4));
	}

	float4 sineNoise42(float2 p)
	{
		float2 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(sineNoise(p), sineNoise(p2), sineNoise(p3), sineNoise(p4));
	}

	float4 sineNoise43(float3 p)
	{
		float3 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(sineNoise(p), sineNoise(p2), sineNoise(p3), sineNoise(p4));
	}

	float4 sineNoise44(float4 p)
	{
		float4 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(sineNoise(p), sineNoise(p2), sineNoise(p3), sineNoise(p4));
	}
	////////////////////////////////////////////////////////////////


	////////////////////////////////////////////////////////////////
	//
	//          Value Noise Basis
	// 
	////////////////////////////////////////////////////////////////


	// 1D
	float valueNoise11 (float p)
	{ return valueNoise(p); }

	float valueNoise12 (float2 p)
	{ return valueNoise(p); }

	float valueNoise13 (float3 p)
	{ return valueNoise(p); }

	float valueNoise14 (float4 p)
	{ return valueNoise(p); }

	// 2D
	float2 valueNoise21 (float p)
	{
		float p2;
		noiseDomainOffset(p, p2);
		return float2(valueNoise(p), valueNoise(p2));
	}

	float2 valueNoise22 (float2 p)
	{
		float2 p2;
		noiseDomainOffset(p, p2);
		return float2(valueNoise(p), valueNoise(p2));
	}

	float2 valueNoise23 (float3 p)
	{
		float3 p2;
		noiseDomainOffset(p, p2);
		return float2(valueNoise(p), valueNoise(p2));
	}

	float2 valueNoise24 (float4 p)
	{
		float4 p2;
		noiseDomainOffset(p, p2);
		return float2(valueNoise(p), valueNoise(p2));
	}

	// 3D
	float3 valueNoise31 (float p)
	{
		float p2, p3;
		noiseDomainOffset(p, p2, p3);
		return float3(valueNoise(p), valueNoise(p2), valueNoise(p3));
	}

	float3 valueNoise32 (float2 p)
	{
		float2 p2, p3; 
		noiseDomainOffset(p, p2, p3);
		return float3(valueNoise(p), valueNoise(p2), valueNoise(p3));
	}

	float3 valueNoise33 (float3 p)
	{
		float3 p2, p3;
		noiseDomainOffset(p, p2, p3);
		return float3(valueNoise(p), valueNoise(p2), valueNoise(p3));
	}

	float3 valueNoise34 (float4 p)
	{
		float4 p2, p3;
		noiseDomainOffset(p, p2, p3);
		return float3(valueNoise(p), valueNoise(p2), valueNoise(p3));
	}

	// 4D
	float4 valueNoise41(float p)
	{
		float p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(valueNoise(p), valueNoise(p2), valueNoise(p3), valueNoise(p4));
	}

	float4 valueNoise42(float2 p)
	{
		float2 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(valueNoise(p), valueNoise(p2), valueNoise(p3), valueNoise(p4));
	}

	float4 valueNoise43(float3 p)
	{
		float3 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(valueNoise(p), valueNoise(p2), valueNoise(p3), valueNoise(p4));
	}

	float4 valueNoise44(float4 p)
	{
		float4 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(valueNoise(p), valueNoise(p2), valueNoise(p3), valueNoise(p4));
	}
	////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////
	//
	//          Look Up Table Basis
	// 
	////////////////////////////////////////////////////////////////


	// 1D
	float lutNoise11 (float p, Texture2D tex, SamplerState samp)
	{ return lutNoise(p, tex, samp); }

	float lutNoise12 (float2 p, Texture2D tex, SamplerState samp)
	{ return lutNoise(p, tex, samp); }

	float lutNoise13 (float3 p, Texture2D tex, SamplerState samp)
	{ return lutNoise(p, tex, samp); }

	float lutNoise14 (float4 p, Texture2D tex, SamplerState samp)
	{ return lutNoise(p, tex, samp); }

	// 2D
	float2 lutNoise21 (float p, Texture2D tex, SamplerState samp)
	{
		float p2;
		noiseDomainOffset(p, p2);
		return float2(lutNoise(p, tex, samp), lutNoise(p2, tex, samp));
	}

	float2 lutNoise22 (float2 p, Texture2D tex, SamplerState samp)
	{
		float2 p2;
		noiseDomainOffset(p, p2);
		return float2(lutNoise(p, tex, samp), lutNoise(p2, tex, samp));
	}

	float2 lutNoise23 (float3 p, Texture2D tex, SamplerState samp)
	{
		float3 p2;
		noiseDomainOffset(p, p2);
		return float2(lutNoise(p, tex, samp), lutNoise(p2, tex, samp));
	}

	float2 lutNoise24 (float4 p, Texture2D tex, SamplerState samp)
	{
		float4 p2;
		noiseDomainOffset(p, p2);
		return float2(lutNoise(p, tex, samp), lutNoise(p2, tex, samp));
	}

	// 3D
	float3 lutNoise31 (float p, Texture2D tex, SamplerState samp)
	{
		float p2, p3;
		noiseDomainOffset(p, p2, p3);
		return float3(lutNoise(p, tex, samp), lutNoise(p2, tex, samp), lutNoise(p3, tex, samp));
	}

	float3 lutNoise32 (float2 p, Texture2D tex, SamplerState samp)
	{
		float2 p2, p3; 
		noiseDomainOffset(p, p2, p3);
		return float3(lutNoise(p, tex, samp), lutNoise(p2, tex, samp), lutNoise(p3, tex, samp));
	}

	float3 lutNoise33 (float3 p, Texture2D tex, SamplerState samp)
	{
		float3 p2, p3;
		noiseDomainOffset(p, p2, p3);
		return float3(lutNoise(p, tex, samp), lutNoise(p2, tex, samp), lutNoise(p3, tex, samp));
	}

	float3 lutNoise34 (float4 p, Texture2D tex, SamplerState samp)
	{
		float4 p2, p3;
		noiseDomainOffset(p, p2, p3);
		return float3(lutNoise(p, tex, samp), lutNoise(p2, tex, samp), lutNoise(p3, tex, samp));
	}

	// 4D
	float4 lutNoise41(float p, Texture2D tex, SamplerState samp)
	{
		float p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(lutNoise(p, tex, samp), lutNoise(p2, tex, samp), lutNoise(p3, tex, samp), lutNoise(p4, tex, samp));
	}

	float4 lutNoise42(float2 p, Texture2D tex, SamplerState samp)
	{
		float2 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(lutNoise(p, tex, samp), lutNoise(p2, tex, samp), lutNoise(p3, tex, samp), lutNoise(p4, tex, samp));
	}

	float4 lutNoise43(float3 p, Texture2D tex, SamplerState samp)
	{
		float3 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(lutNoise(p, tex, samp), lutNoise(p2, tex, samp), lutNoise(p3, tex, samp), lutNoise(p4, tex, samp));
	}

	float4 lutNoise44(float4 p, Texture2D tex, SamplerState samp)
	{
		float4 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(lutNoise(p, tex, samp), lutNoise(p2, tex, samp), lutNoise(p3, tex, samp), lutNoise(p4, tex, samp));
	}
	////////////////////////////////////////////////////////////////


	////////////////////////////////////////////////////////////////
	//
	//          Gradient Noise Basis
	// 
	////////////////////////////////////////////////////////////////


	// 1D
	float gradientNoise11 (float p)
	{ return gradientNoise(p); }

	float gradientNoise12 (float2 p)
	{ return gradientNoise(p); }

	float gradientNoise13 (float3 p)
	{ return gradientNoise(p); }

	float gradientNoise14 (float4 p)
	{ return gradientNoise(p); }

	// 2D
	float2 gradientNoise21 (float p)
	{
		float p2;
		noiseDomainOffset(p, p2);
		return float2(gradientNoise(p), gradientNoise(p2));
	}

	float2 gradientNoise22 (float2 p)
	{
		float2 p2;
		noiseDomainOffset(p, p2);
		return float2(gradientNoise(p), gradientNoise(p2));
	}

	float2 gradientNoise23 (float3 p)
	{
		float3 p2;
		noiseDomainOffset(p, p2);
		return float2(gradientNoise(p), gradientNoise(p2));
	}

	float2 gradientNoise24 (float4 p)
	{
		float4 p2;
		noiseDomainOffset(p, p2);
		return float2(gradientNoise(p), gradientNoise(p2));
	}

	// 3D
	float3 gradientNoise31 (float p)
	{
		float p2, p3;
		noiseDomainOffset(p, p2, p3);
		return float3(gradientNoise(p), gradientNoise(p2), gradientNoise(p3));
	}

	float3 gradientNoise32 (float2 p)
	{
		float2 p2, p3; 
		noiseDomainOffset(p, p2, p3);
		return float3(gradientNoise(p), gradientNoise(p2), gradientNoise(p3));
	}

	float3 gradientNoise33 (float3 p)
	{
		float3 p2, p3;
		noiseDomainOffset(p, p2, p3);
		return float3(gradientNoise(p), gradientNoise(p2), gradientNoise(p3));
	}

	float3 gradientNoise34 (float4 p)
	{
		float4 p2, p3;
		noiseDomainOffset(p, p2, p3);
		return float3(gradientNoise(p), gradientNoise(p2), gradientNoise(p3));
	}

	// 4D
	float4 gradientNoise41(float p)
	{
		float1 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(gradientNoise(p), gradientNoise(p2), gradientNoise(p3), gradientNoise(p4));
	}

	float4 gradientNoise42(float2 p)
	{
		float2 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(gradientNoise(p), gradientNoise(p2), gradientNoise(p3), gradientNoise(p4));
	}

	float4 gradientNoise43(float3 p)
	{
		float3 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(gradientNoise(p), gradientNoise(p2), gradientNoise(p3), gradientNoise(p4));
	}

	float4 gradientNoise44(float4 p)
	{
		float4 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(gradientNoise(p), gradientNoise(p2), gradientNoise(p3), gradientNoise(p4));
	}
	////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////
	//
	//          Simplex Basis
	// 
	////////////////////////////////////////////////////////////////

	// just for study, but can in fact be a usefel cheap basis.  

	// 1D
	float simplexNoise11 (float p)
	{ return simplexNoise(p); }

	float simplexNoise12 (float2 p)
	{ return simplexNoise(p); }

	float simplexNoise13 (float3 p)
	{ return simplexNoise(p); }

	float simplexNoise14 (float4 p)
	{ return simplexNoise(p); }

	// 2D
	float2 simplexNoise21 (float p)
	{
		float p2;
		noiseDomainOffset(p, p2);
		return float2(simplexNoise(p), simplexNoise(p2));
	}

	float2 simplexNoise22 (float2 p)
	{
		float2 p2;
		noiseDomainOffset(p, p2);
		return float2(simplexNoise(p), simplexNoise(p2));
	}

	float2 simplexNoise23 (float3 p)
	{
		float3 p2;
		noiseDomainOffset(p, p2);
		return float2(simplexNoise(p), simplexNoise(p2));
	}

	float2 simplexNoise24 (float4 p)
	{
		float4 p2;
		noiseDomainOffset(p, p2);
		return float2(simplexNoise(p), simplexNoise(p2));
	}

	// 3D
	float3 simplexNoise31 (float p)
	{
		float p2, p3;
		noiseDomainOffset(p, p2, p3);
		return float3(simplexNoise(p), simplexNoise(p2), simplexNoise(p3));
	}

	float3 simplexNoise32 (float2 p)
	{
		float2 p2, p3; 
		noiseDomainOffset(p, p2, p3);
		return float3(simplexNoise(p), simplexNoise(p2), simplexNoise(p3));
	}

	float3 simplexNoise33 (float3 p)
	{
		float3 p2, p3;
		noiseDomainOffset(p, p2, p3);
		return float3(simplexNoise(p), simplexNoise(p2), simplexNoise(p3));
	}

	float3 simplexNoise34 (float4 p)
	{
		float4 p2, p3;
		noiseDomainOffset(p, p2, p3);
		return float3(simplexNoise(p), simplexNoise(p2), simplexNoise(p3));
	}

	// 4D
	float4 simplexNoise41(float p)
	{
		float p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(simplexNoise(p), simplexNoise(p2), simplexNoise(p3), simplexNoise(p4));
	}

	float4 simplexNoise42(float2 p)
	{
		float2 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(simplexNoise(p), simplexNoise(p2), simplexNoise(p3), simplexNoise(p4));
	}

	float4 simplexNoise43(float3 p)
	{
		float3 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(simplexNoise(p), simplexNoise(p2), simplexNoise(p3), simplexNoise(p4));
	}

	float4 simplexNoise44(float4 p)
	{
		float4 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(simplexNoise(p), simplexNoise(p2), simplexNoise(p3), simplexNoise(p4));
	}
	////////////////////////////////////////////////////////////////


	////////////////////////////////////////////////////////////////
	//
	//          worleySimple Basis
	// 
	////////////////////////////////////////////////////////////////

	// just for study, but can in fact be a usefel cheap basis.  

	// 1D
	float worleySimpleNoise11 (float p)
	{ return worleySimpleNoise(p); }

	float worleySimpleNoise12 (float2 p)
	{ return worleySimpleNoise(p); }

	float worleySimpleNoise13 (float3 p)
	{ return worleySimpleNoise(p); }

	float worleySimpleNoise14 (float4 p)
	{ return worleySimpleNoise(p); }

	// 2D
	float2 worleySimpleNoise21 (float p)
	{
		float p2;
		noiseDomainOffset(p, p2);
		return float2(worleySimpleNoise(p), worleySimpleNoise(p2));
	}

	float2 worleySimpleNoise22 (float2 p)
	{
		float2 p2;
		noiseDomainOffset(p, p2);
		return float2(worleySimpleNoise(p), worleySimpleNoise(p2));
	}

	float2 worleySimpleNoise23 (float3 p)
	{
		float3 p2;
		noiseDomainOffset(p, p2);
		return float2(worleySimpleNoise(p), worleySimpleNoise(p2));
	}

	float2 worleySimpleNoise24 (float4 p)
	{
		float4 p2;
		noiseDomainOffset(p, p2);
		return float2(worleySimpleNoise(p), worleySimpleNoise(p2));
	}

	// 3D
	float3 worleySimpleNoise31 (float p)
	{
		float p2, p3;
		noiseDomainOffset(p, p2, p3);
		return float3(worleySimpleNoise(p), worleySimpleNoise(p2), worleySimpleNoise(p3));
	}

	float3 worleySimpleNoise32 (float2 p)
	{
		float2 p2, p3; 
		noiseDomainOffset(p, p2, p3);
		return float3(worleySimpleNoise(p), worleySimpleNoise(p2), worleySimpleNoise(p3));
	}

	float3 worleySimpleNoise33 (float3 p)
	{
		float3 p2, p3;
		noiseDomainOffset(p, p2, p3);
		return float3(worleySimpleNoise(p), worleySimpleNoise(p2), worleySimpleNoise(p3));
	}

	float3 worleySimpleNoise34 (float4 p)
	{
		float4 p2, p3;
		noiseDomainOffset(p, p2, p3);
		return float3(worleySimpleNoise(p), worleySimpleNoise(p2), worleySimpleNoise(p3));
	}

	// 4D
	float4 worleySimpleNoise41(float p)
	{
		float p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(worleySimpleNoise(p), worleySimpleNoise(p2), worleySimpleNoise(p3), worleySimpleNoise(p4));
	}

	float4 worleySimpleNoise42(float2 p)
	{
		float2 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(worleySimpleNoise(p), worleySimpleNoise(p2), worleySimpleNoise(p3), worleySimpleNoise(p4));
	}

	float4 worleySimpleNoise43(float3 p)
	{
		float3 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(worleySimpleNoise(p), worleySimpleNoise(p2), worleySimpleNoise(p3), worleySimpleNoise(p4));
	}

	float4 worleySimpleNoise44(float4 p)
	{
		float4 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(worleySimpleNoise(p), worleySimpleNoise(p2), worleySimpleNoise(p3), worleySimpleNoise(p4));
	}
	////////////////////////////////////////////////////////////////


	////////////////////////////////////////////////////////////////
	//
	//          Random Basis
	// 
	////////////////////////////////////////////////////////////////

	// just for study, but can in fact be a usefel cheap basis.  

	// 1D
	float randomNoise11 (float p)
	{ return randomNoise(p); }

	float randomNoise12 (float2 p)
	{ return randomNoise(p); }

	float randomNoise13 (float3 p)
	{ return randomNoise(p); }

	float randomNoise14 (float4 p)
	{ return randomNoise(p); }

	// 2D
	float2 randomNoise21 (float p)
	{
		float p2;
		noiseDomainOffset(p, p2);
		return float2(randomNoise(p), randomNoise(p2));
	}

	float2 randomNoise22 (float2 p)
	{
		float2 p2;
		noiseDomainOffset(p, p2);
		return float2(randomNoise(p), randomNoise(p2));
	}

	float2 randomNoise23 (float3 p)
	{
		float3 p2;
		noiseDomainOffset(p, p2);
		return float2(randomNoise(p), randomNoise(p2));
	}

	float2 randomNoise24 (float4 p)
	{
		float4 p2;
		noiseDomainOffset(p, p2);
		return float2(randomNoise(p), randomNoise(p2));
	}

	// 3D
	float3 randomNoise31 (float p)
	{
		float p2, p3;
		noiseDomainOffset(p, p2, p3);
		return float3(randomNoise(p), randomNoise(p2), randomNoise(p3));
	}

	float3 randomNoise32 (float2 p)
	{
		float2 p2, p3; 
		noiseDomainOffset(p, p2, p3);
		return float3(randomNoise(p), randomNoise(p2), randomNoise(p3));
	}

	float3 randomNoise33 (float3 p)
	{
		float3 p2, p3;
		noiseDomainOffset(p, p2, p3);
		return float3(randomNoise(p), randomNoise(p2), randomNoise(p3));
	}

	float3 randomNoise34 (float4 p)
	{
		float4 p2, p3;
		noiseDomainOffset(p, p2, p3);
		return float3(randomNoise(p), randomNoise(p2), randomNoise(p3));
	}

	// 4D
	float4 randomNoise41(float p)
	{
		float p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(randomNoise(p), randomNoise(p2), randomNoise(p3), randomNoise(p4));
	}

	float4 randomNoise42(float2 p)
	{
		float2 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(randomNoise(p), randomNoise(p2), randomNoise(p3), randomNoise(p4));
	}

	float4 randomNoise43(float3 p)
	{
		float3 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(randomNoise(p), randomNoise(p2), randomNoise(p3), randomNoise(p4));
	}

	float4 randomNoise44(float4 p)
	{
		float4 p2, p3, p4;
		noiseDomainOffset(p, p2, p3, p4);
		return float4(randomNoise(p), randomNoise(p2), randomNoise(p3), randomNoise(p4));
	}
	////////////////////////////////////////////////////////////////



};