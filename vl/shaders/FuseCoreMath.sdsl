shader FuseCoreMath{

	float maxComponent(float theValue){
		return theValue;
	}

	float maxComponent(float2 theValue){
		return max(theValue.x, theValue.y);
	}

	float maxComponent(float3 theValue){
		return max(max(theValue.x, theValue.y), theValue.z);
	}

	float maxComponent(float4 theValue){
		return max(max(theValue.x, theValue.y),max(theValue.z, theValue.w));
	}

	float sumComponent(float theValue){
		return theValue;
	}

	float sumComponent(float2 theValue){
		return theValue.x + theValue.y;
	}

	float sumComponent(float3 theValue){
		return theValue + theValue.y + theValue.z;
	}

	float sumComponent(float4 theValue){
		return theValue + theValue.y + theValue.z + theValue.w;
	}
	
	float minComponent(float theValue)
	{
		return theValue;
	}

	float minComponent(float2 theValue)
	{
		return min(theValue.x, theValue.y);
	}

	float minComponent(float3 theValue)
	{
		return min(min(theValue.x, theValue.y), theValue.z);
	}

	float minComponent(float4 theValue)
	{
		return min(min(theValue.x, theValue.y),min(theValue.z, theValue.w));
	}

	////////////////////////////////////////////////////////////////
	//
	// CHECK NAN
	//
	////////////////////////////////////////////////////////////////

	bool IsNaN(float x)
	{
		return (asuint(x) & 0x7fffffff) > 0x7f800000;
	}

	bool IsNaN(float2 x)
	{
		return (asuint(x) & 0x7fffffff) > 0x7f800000;
	}

	bool IsNaN(float3 x)
	{
		return (asuint(x) & 0x7fffffff) > 0x7f800000;
	}

	bool IsNaN(float4 x)
	{
		return (asuint(x) & 0x7fffffff) > 0x7f800000;
	}

	////////////////////////////////////////////////////////////////
	//
	//             Constants
	//
	////////////////////////////////////////////////////////////////


	static const float PI = 3.1415926535897;

	static const float INVPI = 0.31830988618;

	static const float HALFPI = 1.57079632679;

	static const float TWOPI = 6.28318531;

	static const float TAU = (2*PI);

	static const float FOUR_PI = 12.56637061436;

	static const float PHI = 1.6180339887498;

	static const float FLOATMIN = 1.175494351e-38; 
	// Minimum representable positive floating-point number



	static const float FLOATMAX = 3.402823466e+38;
	// Maximum representable floating-point number


	////////////////////////////////////////////////////////////////
	//
	//             Safe pow functions
	//
	////////////////////////////////////////////////////////////////

	float pows(float a, float b) {return pow(abs(a),b)*sign(a);}
	float2 pows(float a, float2 b) {return pow(abs(a),b)*sign(a);}
	float3 pows(float a, float3 b) {return pow(abs(a),b)*sign(a);}
	float4 pows(float a, float4 b) {return pow(abs(a),b)*sign(a);}

	float2 pows(float2 a, float b) {return pow(abs(a),b)*sign(a);}
	float2 pows(float2 a, float2 b) {return pow(abs(a),b)*sign(a);}

	float3 pows(float3 a, float b) {return pow(abs(a),b)*sign(a);}
	float3 pows(float3 a, float3 b) {return pow(abs(a),b)*sign(a);}

	float4 pows(float4 a, float b) {return pow(abs(a),b)*sign(a);}
	float4 pows(float4 a, float4 b) {return pow(abs(a),b)*sign(a);}

	////////////////////////////////////////////////////////////////
	//
	//             Vector Min/Max
	//
	////////////////////////////////////////////////////////////////

	// same as sumComponent functions
	
	float vmax(float2 v) 
	{
		return max(v.x, v.y);
	}

	float vmax(float3 v) 
	{
		return max(max(v.x, v.y), v.z);
	}

	float vmax(float4 v) 
	{
		return max(max(v.x, v.y), max(v.z, v.w));
	}

	float vmin(float2 v) 
	{
		return min(v.x, v.y);
	}

	float vmin(float3 v) 
	{
		return min(min(v.x, v.y), v.z);
	}

	float vmin(float4 v) {
		return min(min(v.x, v.y), min(v.z, v.w));
	}


	////////////////////////////////////////////////////////////////
	//
	//             HELPER FUNCTIONS
	//
	////////////////////////////////////////////////////////////////

	// Sign function that doesn't return 0
	float sgn(float x) 
	{
		return (x<0)?-1:1;
	}

	float2 sgn(float2 v) 
	{
		return float2((v.x<0)?-1:1, (v.y<0)?-1:1);
	}

	float square (float x) 
	{
		return x*x;
	}

	float2 square (float2 x) 
	{
		return x*x;
	}

	float3 square (float3 x) 
	{
		return x*x;
	}

	float lengthSqr(float3 x) 
	{
		return dot(x, x);
	}

	float dot2( in float3 v ) { return dot(v,v); }

	// glsl style mod
	#ifndef mod
	#define mod(x, y) (x - y * floor((x) / y))
	#endif

	// Function to compute an approximation of the square root using the Quake III Fast Inverse Square Root algorithm
	float fastSqrt(float x) {
		// Approximate the inverse square root (1/sqrt(x))
		float halfX = 0.5f * x;
		int i = asint(x);            // Interpret the float bits as an integer
		i = 0x5f3759df - (i >> 1);   // Initial approximation of the inverse square root
		float y = asfloat(i);        // Convert the bits back to a float
		y = y * (1.5f - (halfX * y * y)); // First iteration of Newton-Raphson method
		//y = y * (1.5f - (halfX * y * y)); // Second iteration (optional, can be omitted for higher speed)

		// Multiply by x to get the approximation of sqrt(x)
		return x * y;
	}

	float2 fastSqrt(float2 x) {
		float2 halfX = 0.5f * x;
		int2 i = asint(x);             // Interpret the float bits as integers
		i = 0x5f3759df - (i >> 1);     // Initial approximation of the inverse square root
		float2 y = asfloat(i);         // Convert the bits back to floats
		y = y * (1.5f - (halfX * y * y)); // First iteration of Newton-Raphson method

		// Multiply by x to get the approximation of sqrt(x)
		return x * y;
	}

	float3 fastSqrt(float3 x) {
		float3 halfX = 0.5f * x;
		int3 i = asint(x);             // Interpret the float bits as integers
		i = 0x5f3759df - (i >> 1);     // Initial approximation of the inverse square root
		float3 y = asfloat(i);         // Convert the bits back to floats
		y = y * (1.5f - (halfX * y * y)); // First iteration of Newton-Raphson method

		// Multiply by x to get the approximation of sqrt(x)
		return x * y;
	}

	float4 fastSqrt(float4 x) {
		float4 halfX = 0.5f * x;
		int4 i = asint(x);             // Interpret the float bits as integers
		i = 0x5f3759df - (i >> 1);     // Initial approximation of the inverse square root
		float4 y = asfloat(i);         // Convert the bits back to floats
		y = y * (1.5f - (halfX * y * y)); // First iteration of Newton-Raphson method

		// Multiply by x to get the approximation of sqrt(x)
		return x * y;
	}

};