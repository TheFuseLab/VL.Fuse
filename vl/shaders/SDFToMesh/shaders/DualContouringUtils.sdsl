    //#pragma kernel GenerateInnerCellVertices
    //#pragma kernel ApplyLevelOfDetail
    //#pragma kernel GenerateOuterCellVertices
    //#pragma kernel GenerateTriangles

shader DualContouringUtils : SDFInput, SDFCell, SDFVertex, SDFVoxelVolume
{

    static const uint nullVertexIndex = -1;
    static const uint maxNumberOfIntersections = 6;

    struct CellVertexInfo
    {
        uint index;
    };

    CellVertexInfo CreateCellVertexInfo()
    {
        CellVertexInfo cellVertexInfo;
        cellVertexInfo.index = nullVertexIndex;

        return cellVertexInfo;
    }

    struct Intersection
    {
        float3 position;
        float3 normal;
        uint materialIndex;
    };

    Intersection CreateIntersection(float3 position = 0.0f, float3 normal = 0.0f, uint materialIndex = 0)
    {
        Intersection intersection;
        intersection.position = position;
        intersection.normal = normal;
        intersection.materialIndex = materialIndex;

        return intersection;
    }

    uint cellStride = 1;
    uint schmitzParticleIterations = 20;
    float schmitzParticleStepSize = 0.2f;
    bool UseSDFNormal;

    RWStructuredBuffer<CellVertexInfo> cellVertexInfoLookupTable;
    RWStructuredBuffer<Vertex> generatedVertices;
    RWStructuredBuffer<float4> generatedVerticesCounter; //only for tracking the count
    RWStructuredBuffer<Vertex> generatedVertices1; //LOD, not in use for now
    RWStructuredBuffer<uint3> generatedTriangles;

    // Theoretically we can declare below arrays locally and pass them around functions with the "out" or "inout" modifier but that will
    // result in more temporary registers being used by the compiler for some reason. See the following link for more information:
    // https://gamedev.stackexchange.com/questions/190131/splitting-up-hlsl-code-into-separate-functions-causes-the-number-of-needed-tempo.
    static uint numberOfIntersections;
    static Intersection intersections[maxNumberOfIntersections];
    static uint numberOfMaterialIndices;
    static uint materialIndices[numberOfCellCorners];
    static float3 forces[numberOfCellCorners];
    static CellVertexInfo neighbourCellVertexInfos[3];

    bool IsOuterVoxel(uint3 coordinate)
    {
        return any(coordinate == 0 || coordinate == NumberOfVoxels - 2);
    }

    uint CalculateCellVertexInfoLookupTableIndex(uint3 coordinate, uint stride = 1)
    {
        coordinate = IsOuterVoxel(coordinate) ? coordinate : (coordinate - 1) / stride * stride + 1;

        //return dot(coordinate, uint3(1, NumberOfVoxels.x - 1, (NumberOfVoxels.x - 1) * (NumberOfVoxels.y - 1)));
        return dot(coordinate, uint3(1, NumberOfVoxels.x, (NumberOfVoxels.x) * (NumberOfVoxels.y)));
    }

    float3 CalculateCombinedForce(float3 center)
    {
        float alpha = center.x;

        float3 force03 = alpha * forces[3] + (1.0f - alpha) * forces[0];
        float3 force47 = alpha * forces[7] + (1.0f - alpha) * forces[4];
        float3 force12 = alpha * forces[2] + (1.0f - alpha) * forces[1];
        float3 force56 = alpha * forces[6] + (1.0f - alpha) * forces[5];

        float beta = center.z;

        float3 force0347 = beta * force47 + (1.0f - beta) * force03;
        float3 force1256 = beta * force56 + (1.0f - beta) * force12;

        float gamma = center.y;

        return gamma * force1256 + (1.0f - gamma) * force0347;
    }

    float3 CalculateForce(float3 corner)
    {
        float3 force = 0.0f;

        [unroll]
        for (uint intersectionIndex = 0; intersectionIndex < numberOfIntersections; intersectionIndex++)
        {
            float3 position = intersections[intersectionIndex].position;
            float3 normal = intersections[intersectionIndex].normal;
            float distance = dot(normal, corner - position);
            float3 voxelCornerToPlaneVector = -distance * normal;

            force += voxelCornerToPlaneVector;
        }

        return force;
    }

    //uint GetDominantMaterialIndex()
    //{
    //    const uint4x4 uint4x4Identity = uint4x4
    //    (
    //        1, 0, 0, 0,
    //        0, 1, 0, 0,
    //        0, 0, 1, 0,
    //        0, 0, 0, 1
    //    );

    //    const uint length = (numberOfMaterials + 3) / 4;

    //    // We store the counts in an uint4 array so we use up less temporary registers.
    //    uint4 materialIndexOccurenceCounts[length];

    //    [unroll]
    //    for (uint iterator = 0; iterator < length; iterator++)
    //    {
    //        materialIndexOccurenceCounts[iterator] = 0;
    //    }

    //    [unroll]
    //    for (uint index = 0; index < numberOfMaterialIndices; index++)
    //    {
    //        uint materialIndex = materialIndices[index];
    //        materialIndexOccurenceCounts[materialIndex >> 2] += uint4x4Identity[materialIndex & 3];
    //    }

    //    uint2 dominantMaterialIndexWithCorrespondingOccurenceCount = uint2(materialIndices[0], 0);

    //    for (index = 0; index < numberOfMaterialIndices; index++)
    //    {
    //        uint materialIndex = materialIndices[index];
    //        uint materialIndexOccurenceCount = materialIndexOccurenceCounts[materialIndex >> 2][materialIndex & 3];

    //        if (materialIndexOccurenceCount > dominantMaterialIndexWithCorrespondingOccurenceCount.y)
    //        {
    //            dominantMaterialIndexWithCorrespondingOccurenceCount = uint2(materialIndex, materialIndexOccurenceCount);
    //        }
    //    }

    //    return dominantMaterialIndexWithCorrespondingOccurenceCount.x;
    //}

    Vertex CalculateCenterVertex()
    {
        Vertex vertex = CreateVertex();

        [unroll]
        for (uint intersectionIndex = 0; intersectionIndex < numberOfIntersections; intersectionIndex++)
        {
            Intersection intersection = intersections[intersectionIndex];

            vertex.position = vertex.position + intersection.position;
            vertex.normal = vertex.normal + intersection.normal;
        }
        vertex.position = vertex.position / numberOfIntersections;
        vertex.normal = normalize(vertex.normal);

        return vertex;
    }

    Vertex SetNormalFromSDF(Vertex v)
    {
        v.normal = SDFNormal(v.position);
        return v;
    }

    Vertex CalculateCellVertex(uint3 coordinate)
    {
        Vertex vertex = CalculateCenterVertex();

        for (uint cornerIndex = 0; cornerIndex < numberOfCellCorners; cornerIndex++)
        {
            forces[cornerIndex] = CalculateForce(cellCorners[cornerIndex]);
        }

        for (uint schmitzParticleIteration = 0; schmitzParticleIteration < schmitzParticleIterations; schmitzParticleIteration++)
        {
            vertex.position = (vertex.position + schmitzParticleStepSize * CalculateCombinedForce(vertex.position));
        }
        vertex.position = VoxelToVoxelVolumeSpace(coordinate, vertex.position);

        if (UseSDFNormal)
        {
            vertex = SetNormalFromSDF(vertex);
        }

        return vertex;
    }

    void CalculatePositionsAndNormals(uint3 coordinate)
    {
        numberOfIntersections = 0;

        for (uint cellEdgeIndex = 0; cellEdgeIndex < numberOfCellEdges; cellEdgeIndex++)
        {
            uint2 cellEdge = cellEdges[cellEdgeIndex];

            uint3 cellCornerA = cellCorners[cellEdge.x];
            uint3 cellCornerB = cellCorners[cellEdge.y];

            Voxel sampleA = GetVoxel(coordinate + cellCornerA);
            Voxel sampleB = GetVoxel(coordinate + cellCornerB);

            if (IsSolid(sampleA) == IsSolid(sampleB))
            {
                continue;
            }

            float interpolant = - GetValue(sampleA) / (GetValue(sampleB) - GetValue(sampleA));

            float3 pos = lerp(cellCornerA, cellCornerB, interpolant);
            float3 norm = normalize(lerp(GetGradient(sampleA), GetGradient(sampleB), interpolant));

            if (UseSDFNormal)
            {
                norm = SDFNormal(VoxelToVoxelVolumeSpace(coordinate, pos));
            }

            intersections[numberOfIntersections++] = CreateIntersection(pos, norm);
        }
    }

    bool ArePairwiseDistinct(uint3 indices)
    {
        return indices.x != indices.y && indices.x != indices.z && indices.y != indices.z;
    }

    void GenerateTriangle(CellVertexInfo cellVertexInfo, CellVertexInfo firstNeighbourCellVertexInfo, CellVertexInfo secondNeighbourCellVertexInfo)
    {
        //uint3 indices = uint3(cellVertexInfo.index, firstNeighbourCellVertexInfo.index, secondNeighbourCellVertexInfo.index);
        uint3 indices = uint3(cellVertexInfo.index, secondNeighbourCellVertexInfo.index, firstNeighbourCellVertexInfo.index);


        if (!ArePairwiseDistinct(indices))
        {
            return;
        }

        // The first 8 bytes of the generated triangles buffer will be used to store the number of vertices/triangles
        // generated and therefore need to stay empty.
        generatedTriangles[cellVertexInfoLookupTable.IncrementCounter()] = indices;
    }

    void GetNeighbourCellsVertexInfos(uint3 coordinate, uint index)
    {
        const uint3 cellCornerIndices[3] =
        {
            uint3(1, 2, 3),
            uint3(4, 5, 1),
            uint3(3, 7, 4)
        };

        uint3 vertexIndices;

        [unroll]
        for (uint iterator = 0; iterator < 3; iterator++)
        {
            neighbourCellVertexInfos[iterator] = cellVertexInfoLookupTable[CalculateCellVertexInfoLookupTableIndex(coordinate + cellCorners[cellCornerIndices[index][iterator]], cellStride)];
        }
    }

    uint2 GetCellEdge(uint index)
    {
        const uint3 edgeIndices = uint3(5, 6, 10);

        return cellEdges[edgeIndices[index]];
    }
};