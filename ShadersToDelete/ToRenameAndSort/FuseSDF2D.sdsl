// The MIT License
// Copyright Â© 2020 Inigo Quilez
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


shader FuseSDF2D
{

    // Circle - exact   (https://www.shadertoy.com/view/3ltSW2)

    float sdCircle(float2 p, float r){
        return length(p) - r;
    }

    // Rounded Box - exact   (https://www.shadertoy.com/view/4llXD7

    float sdRoundedBox(float2 p, float2 b, float4 r){
        r.xy = (p.x>0.0)?r.xy : r.zw;
        r.x  = (p.y>0.0)?r.x  : r.y;
        float2 q = abs(p)-b+r.x;
        return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;
    }

    // Box - exact   (https://www.youtube.com/watch?v=62-pRVZuS5c)

    float sdBox(float2 p, float2 b )
    {
        float2 d = abs(p)-b;
        return length(max(d,0.0)) + min(max(d.x,d.y),0.0);
    }

    // Oriented Box - exact

    float sdOrientedBox(float2 p, float2 a, float2 b, float th)
    {
        float l = length(b-a);
        float2  d = (b-a)/l;
        float2  q = (p-(a+b)*0.5);
            q = mat2(d.x,-d.y,d.y,d.x)*q;
            q = abs(q)-float2(l,th)*0.5;
        return length(max(q,0.0)) + min(max(q.x,q.y),0.0);    
    }

    // Segment - exact   (https://www.shadertoy.com/view/3tdSDj

    float sdSegment( float2 p, float2 a, float2 b )
    {
        float2 pa = p-a, ba = b-a;
        float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
        return length( pa - ba*h );
    }

    // Rhombus - exact   (https://www.shadertoy.com/view/XdXcRB)

    float sdRhombus( float2 p, float2 b ) 
    {
        float2 q = abs(p);
        float h = clamp((-2.0*ndot(q,b)+ndot(b,b))/dot(b,b),-1.0,1.0);
        float d = length( q - 0.5*b*float2(1.0-h,1.0+h) );
        return d * sign( q.x*b.y + q.y*b.x - b.x*b.y );
    }

    // Equilateral Triangle - exact   (https://www.shadertoy.com/view/Xl2yDW)

    float sdEquilateralTriangle( float2 p )
    {
        const float k = sqrt(3.0);
        p.x = abs(p.x) - 1.0;
        p.y = p.y + 1.0/k;
        if( p.x+k*p.y>0.0 ) p = float2(p.x-k*p.y,-k*p.x-p.y)/2.0;
        p.x -= clamp( p.x, -2.0, 0.0 );
        return -length(p)*sign(p.y);
    }

    // Isosceles Triangle - exact   (https://www.shadertoy.com/view/MldcD7)

    float sdTriangleIsosceles( float2 p, float2 q )
    {
        p.x = abs(p.x);
        float2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );
        float2 b = p - q*float2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );
        float s = -sign( q.y );
        float2 d = min( float2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),
                    float2( dot(b,b), s*(p.y-q.y)  ));
        return -sqrt(d.x)*sign(d.y);
    }

    // Uneven Capsule - exact   (https://www.shadertoy.com/view/4lcBWn)

    float sdUnevenCapsule( float2 p, float r1, float r2, float h )
    {
        p.x = abs(p.x);
        float b = (r1-r2)/h;
        float a = sqrt(1.0-b*b);
        float k = dot(p,float2(-b,a));
        if( k < 0.0 ) return length(p) - r1;
        if( k > a*h ) return length(p-float2(0.0,h)) - r2;
        return dot(p, float2(a,b) ) - r1;
    }

    // Triangle - exact   (https://www.shadertoy.com/view/XsXSz4)

    float sdTriangle( float2 p, float2 p0, float2 p1, float2 p2 )
    {
        float2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;
        float2 v0 = p -p0, v1 = p -p1, v2 = p -p2;
        float2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );
        float2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );
        float2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );
        float s = sign( e0.x*e2.y - e0.y*e2.x );
        float2 d = min(min(float2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),
                        float2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),
                        float2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));
        return -sqrt(d.x)*sign(d.y);
    }

    // Regular Pentagon - exact   (https://www.shadertoy.com/view/llVyWW)

    float sdPentagon( float2 p, float r )
    {
        const vec3 k = vec3(0.809016994,0.587785252,0.726542528);
        p.x = abs(p.x);
        p -= 2.0*min(dot(float2(-k.x,k.y),p),0.0)*float2(-k.x,k.y);
        p -= 2.0*min(dot(float2( k.x,k.y),p),0.0)*float2( k.x,k.y);
        p -= float2(clamp(p.x,-r*k.z,r*k.z),r);    
        return length(p)*sign(p.y);
    }

    // Regular Hexagon - exact

    float sdHexagon( float2 p, float r )
    {
        const vec3 k = vec3(-0.866025404,0.5,0.577350269);
        p = abs(p);
        p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;
        p -= float2(clamp(p.x, -k.z*r, k.z*r), r);
        return length(p)*sign(p.y);
    }

    // Regular Octogon - exact   (https://www.shadertoy.com/view/llGfDG)

    float sdOctogon( float2 p, float r )
    {
        const vec3 k = vec3(-0.9238795325, 0.3826834323, 0.4142135623 );
        p = abs(p);
        p -= 2.0*min(dot(float2( k.x,k.y),p),0.0)*float2( k.x,k.y);
        p -= 2.0*min(dot(float2(-k.x,k.y),p),0.0)*float2(-k.x,k.y);
        p -= float2(clamp(p.x, -k.z*r, k.z*r), r);
        return length(p)*sign(p.y);
    }

    // Hexagram - exact   (https://www.shadertoy.com/view/tt23RR)

    float sdHexagram( float2 p, float r )
    {
        const float4 k = float4(-0.5,0.8660254038,0.5773502692,1.7320508076);
        p = abs(p);
        p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;
        p -= 2.0*min(dot(k.yx,p),0.0)*k.yx;
        p -= float2(clamp(p.x,r*k.z,r*k.w),r);
        return length(p)*sign(p.y);
    }

    // Star 5 - exact   (https://www.shadertoy.com/view/3tSGDy)

    float sdStar5(float2 p, float r, float rf)
    {
        const float2 k1 = float2(0.809016994375, -0.587785252292);
        const float2 k2 = float2(-k1.x,k1.y);
        p.x = abs(p.x);
        p -= 2.0*max(dot(k1,p),0.0)*k1;
        p -= 2.0*max(dot(k2,p),0.0)*k2;
        p.x = abs(p.x);
        p.y -= r;
        float2 ba = rf*float2(-k1.y,k1.x) - float2(0,1);
        float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );
        return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);
    }

    // Regular Star - exact   (https://www.shadertoy.com/view/3tSGDy)

    float sdStar(float2 p, float r, int n, float m)
    {
        // next 4 lines can be precomputed for a given shape
        float an = 3.141593/float(n);
        float en = 3.141593/m;  // m is between 2 and n
        float2  acs = float2(cos(an),sin(an));
        float2  ecs = float2(cos(en),sin(en)); // ecs=float2(0,1) for regular polygon

        float bn = fmod(atan(p.x,p.y),2.0*an) - an;
        p = length(p)*float2(cos(bn),abs(sin(bn)));
        p -= r*acs;
        p += ecs*clamp( -dot(p,ecs), 0.0, r*acs.y/ecs.y);
        return length(p)*sign(p.x);
    }

    // Isosceles Trapezoid - exact   (https://www.shadertoy.com/view/MlycD3)

    float sdTrapezoid( float2 p, float r1, float r2, float he )
    {
        float2 k1 = float2(r2,he);
        float2 k2 = float2(r2-r1,2.0*he);
        p.x = abs(p.x);
        float2 ca = float2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);
        float2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );
        float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;
        return s*sqrt( min(dot2(ca),dot2(cb)) );
    }

    // Pie - exact   (https://www.shadertoy.com/view/3l23RK)

    float sdPie( float2 p, float2 c, float r )
    {
        p.x = abs(p.x);
        float l = length(p) - r;
        float m = length(p-c*clamp(dot(p,c),0.0,r)); // c=sin/cos of aperture
        return max(l,m*sign(c.y*p.x-c.x*p.y));
    }

    // Arc - exact   (https://www.shadertoy.com/view/wl23RK)

    float sdArc( float2 p, float2 sca, float2 scb, float ra, float rb )
    {
        p *= mat2(sca.x,sca.y,-sca.y,sca.x);
        p.x = abs(p.x);
        float k = (scb.y*p.x>scb.x*p.y) ? dot(p,scb) : length(p);
        return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;
    }

    // Horseshoe - exact   (https://www.shadertoy.com/view/WlSGW1)

    float sdHorseshoe( float2 p, float2 c, float r, float2 w )
    {
        p.x = abs(p.x);
        float l = length(p);
        p = mat2(-c.x, c.y, c.y, c.x)*p;
        p = float2((p.y>0.0)?p.x:l*sign(-c.x),
                (p.x>0.0)?p.y:l );
        p = float2(p.x,abs(p.y-r))-w;
        return length(max(p,0.0)) + min(0.0,max(p.x,p.y));
    }

    // Vesica - exact   (https://www.shadertoy.com/view/XtVfRW)

    float sdVesica(float2 p, float r, float d)
    {
        p = abs(p);
        float b = sqrt(r*r-d*d);
        return ((p.y-b)*d>p.x*b) ? length(p-float2(0.0,b))
                                : length(p-float2(-d,0.0))-r;
    }

    // Simple Egg - exact   (https://www.shadertoy.com/view/XtVfRW)

    float sdEgg( float2 p, float ra, float rb )
    {
        const float k = sqrt(3.0);
        p.x = abs(p.x);
        float r = ra - rb;
        return ((p.y<0.0)       ? length(float2(p.x,  p.y    )) - r :
                (k*(p.x+r)<p.y) ? length(float2(p.x,  p.y-k*r)) :
                                length(float2(p.x+r,p.y    )) - 2.0*r) - rb;
    }

    // Cross - exact exterior, bound interior   (https://www.shadertoy.com/view/XtGfzw)

    float sdCross( float2 p, float2 b, float r ) 
    {
        p = abs(p); p = (p.y>p.x) ? p.yx : p.xy;
        float2  q = p - b;
        float k = max(q.y,q.x);
        float2  w = (k>0.0) ? q : float2(b.y-p.x,-k);
        return sign(k)*length(max(w,0.0)) + r;
    }

    // Rounded X - exact   (https://www.shadertoy.com/view/3dKSDc)

    float sdRoundedX( float2 p, float w, float r )
    {
        p = abs(p);
        return length(p-min(p.x+p.y,w)*0.5) - r;
    }

/*
    // Polygon - exact   (https://www.shadertoy.com/view/wdBXRW)

    float sdPolygon( float2[N] v, float2 p )
    {
        float d = dot(p-v[0],p-v[0]);
        float s = 1.0;
        for( int i=0, j=N-1; i<N; j=i, i++ )
        {
            float2 e = v[j] - v[i];
            float2 w =    p - v[i];
            float2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );
            d = min( d, dot(b,b) );
            bvec3 c = bvec3(p.y>=v[i].y,p.y<v[j].y,e.x*w.y>e.y*w.x);
            if( all(c) || all(not(c)) ) s*=-1.0;  
        }
        return s*sqrt(d);
    }
    */

    // Ellipse - exact   (https://www.shadertoy.com/view/4sS3zz)

    float sdEllipse( float2 p, float2 ab )
    {
        p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}
        float l = ab.y*ab.y - ab.x*ab.x;
        float m = ab.x*p.x/l;      float m2 = m*m; 
        float n = ab.y*p.y/l;      float n2 = n*n; 
        float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;
        float q = c3 + m2*n2*2.0;
        float d = c3 + m2*n2;
        float g = m + m*n2;
        float co;
        if( d<0.0 )
        {
            float h = acos(q/c3)/3.0;
            float s = cos(h);
            float t = sin(h)*sqrt(3.0);
            float rx = sqrt( -c*(s + t + 2.0) + m2 );
            float ry = sqrt( -c*(s - t + 2.0) + m2 );
            co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;
        }
        else
        {
            float h = 2.0*m*n*sqrt( d );
            float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);
            float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);
            float rx = -s - u - c*4.0 + 2.0*m2;
            float ry = (s - u)*sqrt(3.0);
            float rm = sqrt( rx*rx + ry*ry );
            co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;
        }
        float2 r = ab * float2(co, sqrt(1.0-co*co));
        return length(r-p) * sign(p.y-r.y);
    }

    // Parabola - exact   (https://www.shadertoy.com/view/ws3GD7)

    float sdParabola( float2 pos, float k )
    {
        pos.x = abs(pos.x);
        float ik = 1.0/k;
        float p = ik*(pos.y - 0.5*ik)/3.0;
        float q = 0.25*ik*ik*pos.x;
        float h = q*q - p*p*p;
        float r = sqrt(abs(h));
        float x = (h>0.0) ? 
            pow(q+r,1.0/3.0) - pow(abs(q-r),1.0/3.0)*sign(r-q) :
            2.0*cos(atan(r,q)/3.0)*sqrt(p);
        return length(pos-float2(x,k*x*x)) * sign(pos.x-x);
    }

    // Parabola Segment - exact   (https://www.shadertoy.com/view/3lSczz)

    float sdParabola( float2 pos, float wi, float he )
    {
        pos.x = abs(pos.x);
        float ik = wi*wi/he;
        float p = ik*(he-pos.y-0.5*ik)/3.0;
        float q = pos.x*ik*ik*0.25;
        float h = q*q - p*p*p;
        float r = sqrt(abs(h));
        float x = (h>0.0) ? 
            pow(q+r,1.0/3.0) - pow(abs(q-r),1.0/3.0)*sign(r-q) :
            2.0*cos(atan(r/q)/3.0)*sqrt(p);
        x = min(x,wi);
        return length(pos-float2(x,he-x*x/ik)) * 
            sign(ik*(pos.y-he)+pos.x*pos.x);
    }

    // Quadratic Bezier - exact   (https://www.shadertoy.com/view/MlKcDD)

    float sdBezier( float2 pos, float2 A, float2 B, float2 C )
    {    
        float2 a = B - A;
        float2 b = A - 2.0*B + C;
        float2 c = a * 2.0;
        float2 d = A - pos;
        float kk = 1.0/dot(b,b);
        float kx = kk * dot(a,b);
        float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;
        float kz = kk * dot(d,a);      
        float res = 0.0;
        float p = ky - kx*kx;
        float p3 = p*p*p;
        float q = kx*(2.0*kx*kx-3.0*ky) + kz;
        float h = q*q + 4.0*p3;
        if( h >= 0.0) 
        { 
            h = sqrt(h);
            float2 x = (float2(h,-h)-q)/2.0;
            float2 uv = sign(x)*pow(abs(x), float2(1.0/3.0));
            float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );
            res = dot2(d + (c + b*t)*t);
        }
        else
        {
            float z = sqrt(-p);
            float v = acos( q/(p*z*2.0) ) / 3.0;
            float m = cos(v);
            float n = sin(v)*1.732050808;
            vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);
            res = min( dot2(d+(c+b*t.x)*t.x),
                    dot2(d+(c+b*t.y)*t.y) );
            // the third root cannot be the closest
            // res = min(res,dot2(d+(c+b*t.z)*t.z));
        }
        return sqrt( res );
    }
};