shader FuseRayMarch: FuseRayMarchBase, ShaderBaseStream, Transformation, Texturing, PositionStream4, NormalStream, FuseCommonTypes
{

	// the signed distance field to raymarch
	abstract float SDF(float3 p);	


	// just generate normals with central difference
	float3 SDFNormal(float3 p, float e = 0.01)
	{
		float3 gradient = float3 (	(SDF(p + float3(e,0,0)) - SDF(p - float3(e,0,0))) / (2*e), 
									(SDF(p + float3(0,e,0)) - SDF(p - float3(0,e,0))) / (2*e), 
									(SDF(p + float3(0,0,e)) - SDF(p - float3(0,0,e))) / (2*e)	);
		return normalize(gradient+0.0000001);

	}


	void marchRayDefualt(inout Ray ray, float2 minMaxDist = float2(.05, 100), int maxIter = 180)
	{
		float3 startPos = ray.ro + ray.rd * minMaxDist.x;
		float3 p = startPos;
		float z = minMaxDist.x;
		//minMaxDist.y -= minMaxDist.x;
		for(int i=0; i<maxIter; i++)
		{
			float dist = SDF(p);
			p += ray.rd * dist;	
			z += dist;
			if(abs(dist) < 0.0001 * z || z > minMaxDist.y) break;
		}

		if(z > minMaxDist.y) discard;
		ray.sp = p;
		ray.sn = SDFNormal(ray.sp);
	}



	float3 rayMarch(float3 rayPos, float3 rayDir, float stepLength = .9, float minDist = 0.1, float maxDist = 200.0, int maxIter = 120)
	{
		float3 startPos = rayPos + rayDir * minDist;
		float3 p = startPos;
		float z = minDist;
		maxDist -= minDist;
		for(int i=0; i<maxIter; i++)
		{
			float dist = SDF(p);
			float rayStep = stepLength * dist;
			p += rayDir * rayStep;	
			z += rayStep;
			if(abs(dist) < 0.0001 * z || z > maxDist) break;
		}
		return p;
	}
	////////////////////////////////////////////////////////////////


	
	
	

	// Raymarch a scene.  Takes uv and returns pos(p), normals(n) & distance(z)
	void rayMarcher(float2 uv, out float3 p, out float3 n, out float3 rd, out float z)
	{
		// Paramerters
		int marchMaxIterations = 120;
		float marchMaxDistance = 200;
		float marchMinDistance = 0.1f;
		float marchStepLength = 0.75f;
		float alpha = 1;

		float3 ro;
		setupRay(uv, ro, rd);

		p = rayMarch(ro, rd, marchStepLength, marchMinDistance, marchMaxDistance, marchMaxIterations);
		float ff=SDF(p);
		if(abs(ff)>.5)discard;
		z = length(p - ro);
		n = SDFNormal(p);
		//if (n != n) discard;
	}



	


};